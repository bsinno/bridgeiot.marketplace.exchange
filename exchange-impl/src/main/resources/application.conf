akka {
  loglevel = DEBUG
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  
  http {
    server {
      parsing {
        max-uri-length = 10k
      }
    }
  }
  actor {
    serializers {
      organization-event-serializer = "exchange.persistence.OrganizationEventSerializer"
      provider-event-serializer = "exchange.persistence.ProviderEventSerializer"
      consumer-event-serializer = "exchange.persistence.ConsumerEventSerializer"
      offering-event-serializer = "exchange.persistence.OfferingEventSerializer"
      offeringquery-event-serializer = "exchange.persistence.OfferingQueryEventSerializer"
      subscription-event-serializer = "exchange.persistence.SubscriptionEventSerializer"
      semantics-event-serializer = "exchange.persistence.SemanticsEventSerializer"

      organization-serializer = "exchange.persistence.OrganizationSerializer"
      provider-serializer = "exchange.persistence.ProviderSerializer"
      consumer-serializer = "exchange.persistence.ConsumerSerializer"
      offering-serializer = "exchange.persistence.OfferingSerializer"
      offeringquery-serializer = "exchange.persistence.OfferingQuerySerializer"
      querytoofferingsubscription-serializer = "exchange.persistence.QueryToOfferingSubscriptionSerializer"
      consumertoofferingsubscription-serializer = "exchange.persistence.ConsumerToOfferingSubscriptionSerializer"
      offeringCategory-serializer = "exchange.persistence.OfferingCategorySerializer"
    }
    serialization-bindings {
      "java.io.Serializable" = none
      
      "exchange.api.organization$OrganizationEvent" = organization-event-serializer
      "exchange.api.provider$ProviderEvent" = provider-event-serializer
      "exchange.api.consumer$ConsumerEvent" = consumer-event-serializer
      "exchange.api.offering$OfferingEvent" = offering-event-serializer
      "exchange.api.offeringquery$OfferingQueryEvent" = offeringquery-event-serializer
      "exchange.api.subscription$SubscriptionEvent" = subscription-event-serializer
      "exchange.api.semantics$SemanticsEvent" = semantics-event-serializer

      "exchange.api.organization$Organization" = organization-serializer
      "exchange.api.provider$Provider" = provider-serializer
      "exchange.api.consumer$Consumer" = consumer-serializer
      "exchange.api.consumer$ConsumerToOfferingSubscription" = consumertoofferingsubscription-serializer
      "exchange.api.offering$Offering" = offering-serializer
      "exchange.api.offeringquery$OfferingQuery" = offeringquery-serializer
      "exchange.api.offeringquery$QueryToOfferingSubscription" = querytoofferingsubscription-serializer
      "exchange.api.semantics$OfferingCategory" = offeringCategory-serializer
    }
  }
  persistence {
    journal {
      plugin = "cassandra-journal"
    }
    snapshot-store {
      plugin = "cassandra-snapshot-store"
    }
  }
}

cassandra-journal {
  contact-points = ["cassandra",${?CASSANDRA_HOST}]
  keyspace = akka_${?MARKETENV}

  tags {
    "Organization" = 1
    "Provider" = 1
    "Consumer" = 1
    "Offering" = 1
    "OfferingQuery" = 1
    "Subscription" = 1
    "Exchange" = 2
  }

  event-adapters {
    organization-tagger = "exchange.persistence.OrganizationTagWriteEventAdapter"
    provider-tagger = "exchange.persistence.ProviderTagWriteEventAdapter"
    consumer-tagger = "exchange.persistence.ConsumerTagWriteEventAdapter"
    offering-tagger = "exchange.persistence.OfferingTagWriteEventAdapter"
    offeringquery-tagger = "exchange.persistence.OfferingQueryTagWriteEventAdapter"
    subscription-tagger = "exchange.persistence.SubscriptionTagWriteEventAdapter"
    semantics-tagger = "exchange.persistence.SemanticsTagWriteEventAdapter"
  }
  event-adapter-bindings = {
    "exchange.api.organization$OrganizationEvent" = organization-tagger
    "exchange.api.provider$ProviderEvent" = provider-tagger
    "exchange.api.consumer$ConsumerEvent" = consumer-tagger
    "exchange.api.offering$OfferingEvent" = offering-tagger
    "exchange.api.offeringquery$OfferingQueryEvent" = offeringquery-tagger
    "exchange.api.subscription$SubscriptionEvent" = subscription-tagger
    "exchange.api.semantics$SemanticsEvent" = semantics-tagger
  }
}

cassandra-query-journal {
  refresh-interval = 200ms
  eventual-consistency-delay = 0
  delayed-event-timeout = 30s
}

cassandra-snapshot-store {
  contact-points = ["cassandra",${?CASSANDRA_HOST}]
  keyspace = akka_snapshot_${?MARKETENV}
}
